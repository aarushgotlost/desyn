
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is in allowedUsers list of a project
    function isAllowedUser(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.allowedUsers;
    }

    // Helper function to check if user is owner of a project
    function isOwner(projectId) {
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId;
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
      // Subcollections for user-specific data like 'following', 'followers'
      match /following/{followingId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /followers/{followerId} {
        allow read, write: if request.auth.uid == followerId; // Or more restrictive if needed
      }
    }

    match /communities/{communityId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.createdBy == request.auth.uid || request.auth.uid in resource.data.members; // Example: owner or member can update
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.members;
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.members;
      }
    }

    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth.uid == resource.data.authorId; // Only author can update
      allow delete: if request.auth.uid == resource.data.authorId; // Only author can delete

      // Likes subcollection
      match /likes/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth.uid == userId; // User can only like/unlike for themselves
      }
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId;
        // allow update, delete: if request.auth.uid == resource.data.authorId; // If you want to allow editing/deleting comments
      }
    }

    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participantUids;
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }

    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId; // User can read/update their own notifications
        allow create: if request.auth != null; // Anyone authenticated can create notifications (e.g., system, other users via actions)
        allow delete: if request.auth.uid == resource.data.userId; // User can delete their own notifications
    }

    // Tearix 2D Animation Projects
    // Renamed from 'canvases' to 'projects' for clarity
    match /projects/{projectId} {
      allow read, update: if isAllowedUser(projectId);
      allow create: if request.auth.uid == request.resource.data.ownerId && request.auth.uid in request.resource.data.allowedUsers;
      allow delete: if isOwner(projectId); // Only owner can delete the project

      // Frames subcollection
      match /frames/{frameId} {
        allow read, write: if isAllowedUser(projectId); // Read/write frames if allowed on project
        allow create: if isAllowedUser(projectId) && request.resource.data.projectId == projectId;
        allow delete: if isAllowedUser(projectId);
      }
    }
  }
}
