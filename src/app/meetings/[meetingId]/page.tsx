
"use client";

import { useEffect, useState, useRef } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuth, type UserProfile as AuthUserProfileType } from '@/contexts/AuthContext';
import { getMeetingDetailsFirestore } from '@/services/firestoreService';
import type { Meeting, MeetingParticipant } from '@/types/data';
import { get100msTokenAction, joinMeetingSession, endMeetingSession } from '@/actions/meetingActions';
import { MeetingRoomUI } from '@/components/meetings/MeetingRoomUI';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, AlertTriangle, VideoOff, ArrowLeft } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { USER_ROLES_100MS } from '@/lib/constants';
import Link from 'next/link';

export default function MeetingPage() {
  const params = useParams();
  const meetingId = params.meetingId as string;
  const router = useRouter();
  const { user, userProfile, loading: authLoading } = useAuth();
  const { toast } = useToast();

  const [meetingDetails, setMeetingDetails] = useState<Meeting | null>(null);
  const [isLoadingMeeting, setIsLoadingMeeting] = useState(true);
  const [authToken, setAuthToken] = useState<string | null>(null);
  const [isJoiningVideo, setIsJoiningVideo] = useState(false);
  const [showTokenInput, setShowTokenInput] = useState(false);
  const [manualToken, setManualToken] = useState('');
  const [tokenError, setTokenError] = useState<string | null>(null);
  const [needsToJoinFirestore, setNeedsToJoinFirestore] = useState(false);
  const [isProcessingFirestoreJoin, setIsProcessingFirestoreJoin] = useState(false);

  useEffect(() => {
    async function fetchMeeting() {
      if (!meetingId || authLoading) return;
      if (!user) {
        router.replace('/login');
        return;
      }
      setIsLoadingMeeting(true);
      try {
        const details = await getMeetingDetailsFirestore(meetingId);
        if (details) {
          setMeetingDetails(details);
          if (!details.isActive) {
            toast({ title: "Meeting Ended", description: "This meeting has already ended.", variant: "destructive" });
          }
          // Check if current user is a Firestore participant
          const isParticipant = details.participantUids.includes(user.uid);
          if (details.isActive && !isParticipant) {
            setNeedsToJoinFirestore(true);
          } else if (details.isActive && isParticipant) {
            // If already a participant, try to get 100ms token
            attemptTokenGeneration(details.roomId100ms, user.uid, details.hostUid === user.uid ? USER_ROLES_100MS.SPEAKER : USER_ROLES_100MS.LISTENER);
          }
        } else {
          toast({ title: "Not Found", description: "Meeting not found.", variant: "destructive" });
          router.replace('/meetings');
        }
      } catch (error) {
        toast({ title: "Error", description: "Failed to load meeting details.", variant: "destructive" });
        router.replace('/meetings');
      } finally {
        setIsLoadingMeeting(false);
      }
    }
    fetchMeeting();
  }, [meetingId, user, authLoading, router, toast]);

  const attemptTokenGeneration = async (roomId100ms: string, userId: string, role: string) => {
    setIsJoiningVideo(true);
    setTokenError(null);
    try {
      const tokenResult = await get100msTokenAction(userId, roomId100ms, role);
      if (tokenResult.token) {
        setAuthToken(tokenResult.token);
        setShowTokenInput(false);
      } else {
        // No token generated by placeholder, prompt for manual input
        setTokenError(tokenResult.message || tokenResult.error || "A 100ms auth token is required.");
        setShowTokenInput(true);
      }
    } catch (error: any) {
      toast({ title: "Token Error", description: error.message || "Failed to get meeting token.", variant: "destructive" });
      setTokenError(error.message || "Failed to get meeting token.");
      setShowTokenInput(true);
    } finally {
      setIsJoiningVideo(false);
    }
  };

  const handleManualTokenSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (manualToken.trim()) {
      setAuthToken(manualToken.trim());
      setShowTokenInput(false);
      setTokenError(null);
    } else {
      setTokenError("Please enter a valid 100ms auth token.");
    }
  };
  
  const handleJoinFirestoreMeeting = async () => {
    if (!user || !userProfile || !meetingDetails) return;
    setIsProcessingFirestoreJoin(true);
    try {
      const role = meetingDetails.hostUid === user.uid ? USER_ROLES_100MS.SPEAKER : USER_ROLES_100MS.LISTENER;
      const result = await joinMeetingSession(meetingId, userProfile, role);
      if (result.success) {
        toast({ title: "Joined Meeting", description: "You have successfully joined the meeting session." });
        setNeedsToJoinFirestore(false);
        // Refresh meeting details to include self as participant
        const updatedDetails = await getMeetingDetailsFirestore(meetingId);
        if (updatedDetails) setMeetingDetails(updatedDetails);
        
        attemptTokenGeneration(meetingDetails.roomId100ms, user.uid, role);

      } else {
        toast({ title: "Error", description: result.message, variant: "destructive" });
      }
    } catch (error: any) {
       toast({ title: "Error", description: "Could not join meeting session.", variant: "destructive" });
    } finally {
        setIsProcessingFirestoreJoin(false);
    }
  };

  const handleLeaveOrEndMeeting = async () => {
    if (!user || !meetingDetails) return;
    // The MeetingRoomUI component will call hmsActions.leave() internally
    // This function is for handling Firestore document update and navigation

    if (meetingDetails.hostUid === user.uid) {
      // Host ends the meeting for everyone
      const result = await endMeetingSession(meetingId, user.uid);
      if (result.success) {
        toast({ title: "Meeting Ended", description: "The meeting has been ended." });
      } else {
        toast({ title: "Error", description: result.message, variant: "destructive" });
      }
    } else {
      // Participant leaves (no specific Firestore action needed here other than UI change)
      toast({ title: "Left Meeting", description: "You have left the meeting." });
    }
    router.push('/meetings');
  };


  if (authLoading || isLoadingMeeting) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <Loader2 className="h-16 w-16 animate-spin text-primary mb-4" />
        <p className="text-muted-foreground">Loading meeting details...</p>
      </div>
    );
  }

  if (!meetingDetails) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4 text-center">
         <VideoOff size={64} className="text-destructive mb-4" />
        <h1 className="text-2xl font-semibold mb-2">Meeting Not Found</h1>
        <p className="text-muted-foreground mb-6">The meeting you are looking for doesn't exist or may have been removed.</p>
        <Button asChild variant="outline">
          <Link href="/meetings"><ArrowLeft className="mr-2 h-4 w-4" />Back to Meetings</Link>
        </Button>
      </div>
    );
  }
  
  if (!meetingDetails.isActive) {
     return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4 text-center">
         <VideoOff size={64} className="text-muted-foreground mb-4" />
        <h1 className="text-2xl font-semibold mb-2">Meeting Has Ended</h1>
        <p className="text-muted-foreground mb-6">This meeting, "{meetingDetails.title}", is no longer active.</p>
        <Button asChild variant="outline">
          <Link href="/meetings"><ArrowLeft className="mr-2 h-4 w-4" />Back to Meetings</Link>
        </Button>
      </div>
    );
  }

  if (needsToJoinFirestore) {
    return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
            <Card className="w-full max-w-md shadow-lg">
                <CardHeader>
                    <CardTitle>Join Meeting: {meetingDetails.title}</CardTitle>
                    <CardDescription>You need to join this meeting session to participate.</CardDescription>
                </CardHeader>
                <CardContent>
                    <p className="text-sm mb-4">Room ID (100ms): <code className="text-xs bg-muted p-1 rounded">{meetingDetails.roomId100ms}</code></p>
                    <Button onClick={handleJoinFirestoreMeeting} className="w-full" disabled={isProcessingFirestoreJoin}>
                        {isProcessingFirestoreJoin ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : "Join Meeting Session"}
                    </Button>
                </CardContent>
            </Card>
        </div>
    );
  }


  if (!authToken && showTokenInput) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <Card className="w-full max-w-md shadow-lg">
          <CardHeader>
            <CardTitle>Enter 100ms Auth Token</CardTitle>
            <CardDescription>
              To join the video meeting for "{meetingDetails.title}" (Room ID: <code className="text-xs bg-muted p-1 rounded">{meetingDetails.roomId100ms}</code>),
              please provide an auth token.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleManualTokenSubmit} className="space-y-4">
              <div className="p-3 rounded-md bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-300 dark:border-yellow-700">
                  <div className="flex items-start">
                    <AlertTriangle className="h-5 w-5 text-yellow-600 dark:text-yellow-400 mr-2 mt-0.5 flex-shrink-0" />
                    <div className="text-sm text-yellow-700 dark:text-yellow-300">
                      <p className="font-semibold">Developer Note:</p>
                      <p>For this prototype, obtain a short-lived Auth Token from your <a href="https://dashboard.100ms.live/" target="_blank" rel="noopener noreferrer" className="underline hover:text-yellow-500">100ms Dashboard</a> for Room ID: <code className="bg-yellow-200 dark:bg-yellow-800/50 px-1 py-0.5 rounded text-xs">{meetingDetails.roomId100ms}</code>. In production, tokens must be generated by a secure backend.</p>
                    </div>
                  </div>
              </div>
              <div>
                <Label htmlFor="manualToken">100ms Auth Token</Label>
                <Input
                  id="manualToken"
                  type="text"
                  value={manualToken}
                  onChange={(e) => setManualToken(e.target.value)}
                  placeholder="Paste your 100ms auth token here"
                  className="mt-1"
                />
              </div>
              {tokenError && <p className="text-sm text-destructive">{tokenError}</p>}
              <Button type="submit" className="w-full" disabled={isJoiningVideo || !manualToken.trim()}>
                {isJoiningVideo ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : "Join Video Call"}
              </Button>
            </form>
             <Button variant="outline" onClick={() => router.push('/meetings')} className="w-full mt-2">
                Cancel
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  if (!authToken && isJoiningVideo) {
     return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <Loader2 className="h-16 w-16 animate-spin text-primary mb-4" />
        <p className="text-muted-foreground">Preparing meeting room...</p>
      </div>
    );
  }


  if (authToken && user && userProfile && meetingDetails) {
    return (
      <MeetingRoomUI
        authToken={authToken}
        userName={userProfile.displayName || user.email || "User"}
        meetingTitle={meetingDetails.title}
        onLeaveMeeting={handleLeaveOrEndMeeting}
        isHost={meetingDetails.hostUid === user.uid}
      />
    );
  }

  // Fallback if something unexpected happens
  return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4 text-center">
         <VideoOff size={64} className="text-destructive mb-4" />
        <h1 className="text-2xl font-semibold mb-2">Cannot Join Meeting</h1>
        <p className="text-muted-foreground mb-6">There was an issue preparing the meeting. Please try again or contact support.</p>
        <Button asChild variant="outline">
          <Link href="/meetings"><ArrowLeft className="mr-2 h-4 w-4" />Back to Meetings</Link>
        </Button>
      </div>
  );
}
