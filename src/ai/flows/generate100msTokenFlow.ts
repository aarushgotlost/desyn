
'use server';
/**
 * @fileOverview A Genkit flow to (conceptually) generate a 100ms auth token.
 * IMPORTANT: This is a placeholder for a secure backend token generation process.
 *
 * - generate100msToken - Calls the internal flow.
 * - GenerateTokenInput - Input type for the token generation.
 * - GenerateTokenOutput - Output type for the token generation.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTokenInputSchema = z.object({
  userId: z.string().describe("The unique identifier for the user joining the meeting."),
  roomId: z.string().describe("The 100ms Room ID for the meeting."),
  role: z.string().describe("The role of the user in the 100ms room (e.g., 'speaker', 'listener')."),
});
export type GenerateTokenInput = z.infer<typeof GenerateTokenInputSchema>;

const GenerateTokenOutputSchema = z.object({
  token: z.string().optional().describe("The 100ms auth token. Will be empty if generation is simulated."),
  error: z.string().optional().describe("Error message if token generation failed or is simulated."),
  message: z.string().optional().describe("A message to the developer regarding token generation strategy.")
});
export type GenerateTokenOutput = z.infer<typeof GenerateTokenOutputSchema>;

export async function generate100msToken(input: GenerateTokenInput): Promise<GenerateTokenOutput> {
  return internalGenerate100msTokenFlow(input);
}

// THIS IS A TEMPORARY PROTOTYPING TOKEN. DO NOT USE IN PRODUCTION.
const PROTOTYPE_GUEST_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjoyLCJ0eXBlIjoiYXBwIiwiYXBwX2RhdGEiOm51bGwsImFjY2Vzc19rZXkiOiI2ODUwMTAyMGJkMGRhYjVmOWEwMTI4YWQiLCJyb2xlIjoiZ3Vlc3QiLCJyb29tX2lkIjoiNjg1MDEzMDVhNDhjYTYxYzQ2NDc0MGU3IiwidXNlcl9pZCI6ImEyY2FhYjcyLTMxOWEtNDI5YS05MTkwLTM2OWJhYTI0NDhjOCIsImV4cCI6MTc1MDE2NTQ0MCwianRpIjoiYjc5Y2EyMjctNTVjZS00MmNmLTg0NjEtYzRmNTA3N2QwMDFkIiwiaWF0IjoxNzUwMDc5MDQwLCJpc3MiOiI2ODUwMTAyMGJkMGRhYjVmOWEwMTI4YWIiLCJuYmYiOjE3NTAwNzkwNDAsInN1YiI6ImFwaSJ9.0ALU1v2WrZo8phrYvky1vX-yLtyXkOJ0i785LRtK2jk";


const internalGenerate100msTokenFlow = ai.defineFlow(
  {
    name: 'internalGenerate100msTokenFlow',
    inputSchema: GenerateTokenInputSchema,
    outputSchema: GenerateTokenOutputSchema,
  },
  async (input: GenerateTokenInput): Promise<GenerateTokenOutput> => {
    // SECURITY WARNING & PROTOTYPE NOTE:
    // This flow SIMULATES token generation. In a real-world application,
    // 100ms auth tokens MUST be generated by a secure backend server using your
    // 100ms Management Token (App Access Key's management_token).
    // Never expose your Management Token on the client-side or in insecure server code.

    console.warn(
      `SECURITY WARNING: Using a hardcoded prototype 100ms token for room ${input.roomId}, user ${input.userId}, role ${input.role}.` +
      ` This is NOT for production. A real backend is required for secure token generation.`
    );

    // For this prototype, if the role is "guest", we return the hardcoded guest token.
    // For other roles (like "host"), we'll still indicate simulation.
    if (input.role === "guest" || input.role === "host") { // Simplified: using the same token for host for now.
      return {
        token: PROTOTYPE_GUEST_TOKEN,
        message: "Using a hardcoded prototype token. This is insecure and for development testing only. Replace with real backend token generation for production."
      };
    }

    return {
      token: undefined, 
      error: "Token generation is simulated for this role.",
      message: "For this prototype, a hardcoded token is used for 'guest'. Other roles are simulated. A secure backend is required for real token generation for all roles."
    };
  }
);

