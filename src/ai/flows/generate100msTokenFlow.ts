'use server';
/**
 * @fileOverview A Genkit flow to (conceptually) generate a 100ms auth token.
 * IMPORTANT: This is a placeholder for a secure backend token generation process.
 *
 * - generate100msToken - Calls the internal flow.
 * - GenerateTokenInput - Input schema for the token generation.
 * - GenerateTokenOutput - Output schema for the token generation.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const GenerateTokenInputSchema = z.object({
  userId: z.string().describe("The unique identifier for the user joining the meeting."),
  roomId: z.string().describe("The 100ms Room ID for the meeting."),
  role: z.string().describe("The role of the user in the 100ms room (e.g., 'speaker', 'listener')."),
});
export type GenerateTokenInput = z.infer<typeof GenerateTokenInputSchema>;

export const GenerateTokenOutputSchema = z.object({
  token: z.string().optional().describe("The 100ms auth token. Will be empty if generation is simulated."),
  error: z.string().optional().describe("Error message if token generation failed or is simulated."),
  message: z.string().optional().describe("A message to the developer regarding token generation strategy.")
});
export type GenerateTokenOutput = z.infer<typeof GenerateTokenOutputSchema>;

export async function generate100msToken(input: GenerateTokenInput): Promise<GenerateTokenOutput> {
  return internalGenerate100msTokenFlow(input);
}

const internalGenerate100msTokenFlow = ai.defineFlow(
  {
    name: 'internalGenerate100msTokenFlow',
    inputSchema: GenerateTokenInputSchema,
    outputSchema: GenerateTokenOutputSchema,
  },
  async (input: GenerateTokenInput): Promise<GenerateTokenOutput> => {
    // SECURITY WARNING & PROTOTYPE NOTE:
    // This flow SIMULATES token generation. In a real-world application,
    // 100ms auth tokens MUST be generated by a secure backend server using your
    // 100ms Management Token (App Access Key's management_token).
    // Never expose your Management Token on the client-side or in insecure server code.

    // For this prototype, the frontend (`MeetingRoom.tsx`) will guide the user
    // to manually obtain a short-lived auth token from the 100ms Dashboard
    // for the specified `input.roomId` and paste it.

    console.warn(
      `SECURITY WARNING: Simulated 100ms token generation for room ${input.roomId}, user ${input.userId}, role ${input.role}.` +
      ` This is NOT for production. A real backend is required.`
    );

    return {
      token: undefined, // No token is generated here.
      error: "Token generation is simulated.",
      message: "For this prototype, please obtain an auth token from your 100ms Dashboard for the room and paste it into the UI. A secure backend is required for real token generation."
    };
  }
);
